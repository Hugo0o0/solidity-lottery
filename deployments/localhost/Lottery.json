{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPick",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRafleState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1348c19c02fc226edb9ccbcab0d67a8008164878b246c0afd6d763b281c5ebac",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1200218",
    "logsBloom": "0x
    "blockHash": "0x2c18ea0800ba7e21edf63ab9ecf4bb3ca2fe527a774e9610a01c8f6c1f99ff8a",
    "transactionHash": "0x1348c19c02fc226edb9ccbcab0d67a8008164878b246c0afd6d763b281c5ebac",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1200218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "613e7636f940090c1b7f06163c3d859a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPick\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRafleState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\nerror Lottery__NotEnoughETH();\\r\\nerror Lottery__TransferFailed();\\r\\nerror Lottery__NotOpen();\\r\\nerror Lottery__UpkeepNotNeeded(uint256 balance, uint256 players, uint256 state);\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    enum LotteryState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    address payable[] private s_players;\\r\\n    address private s_recentWinner;\\r\\n    LotteryState private s_lotteryState;\\r\\n\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\\r\\n    bytes32 private immutable i_keyHash;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private s_lastTimestamp;\\r\\n\\r\\n    event LotteryEnter(address indexed player);\\r\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\r\\n    event WinnerPick(address indexed winner);\\r\\n\\r\\n    modifier onlyEnoughETH() {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Lottery__NotEnoughETH();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOpen() {\\r\\n        if (s_lotteryState != LotteryState.OPEN) {\\r\\n            revert Lottery__NotOpen();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 keyHash,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_keyHash = keyHash;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        i_interval = interval;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        s_lastTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function enterLottery() public payable onlyOpen onlyEnoughETH {\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit LotteryEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Lottery__UpkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_lotteryState)\\r\\n            );\\r\\n        }\\r\\n        s_lotteryState = LotteryState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinatorV2.requestRandomWords(\\r\\n            i_keyHash,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedLotteryWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId */,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\r\\n        address recentWinner = s_players[winnerIndex];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimestamp = block.timestamp;\\r\\n\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            revert Lottery__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPick(recentWinner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen = s_lotteryState == LotteryState.OPEN;\\r\\n        bool isInterval = block.timestamp >= s_lastTimestamp + i_interval;\\r\\n        bool hasEnoughPlayers = s_players.length > 0;\\r\\n        bool hasEnoughETH = address(this).balance >= i_entranceFee;\\r\\n        upkeepNeeded = isOpen && isInterval && hasEnoughPlayers && hasEnoughETH;\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address payable) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRafleState() public view returns (LotteryState) {\\r\\n        return s_lotteryState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimestamp;\\r\\n    }\\r\\n\\r\\n    function requestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbb66e77543072389e73568ebdd6311990e2d11f05194022a2aa538f7daafdb21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620017f1380380620017f1833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250508061014081815250506000600160146101000a81548160ff0219169083600181111562000116576200011562000330565b5b0217905550426002819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611422620003cf600039600061060d015260006104d9015260006104b601526000610495015260006104590152600081816102b40152818161064e015261072c0152600081816102da015261032e01526114226000f3fe6080604052600436106100a75760003560e01c80636e04ff0d116100645780636e04ff0d146101aa578063977bb0b6146101e8578063b0fb162f14610213578063c1af57851461023e578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac5780631fe543e3146100d7578063320229eb146101005780634585e33b1461012b578063473f1ddc1461015457806353a2c19a1461017f575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b70565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610d24565b6102d8565b005b34801561010c57600080fd5b50610115610398565b6040516101229190610b70565b60405180910390f35b34801561013757600080fd5b50610152600480360381019061014d9190610ddb565b6103a2565b005b34801561016057600080fd5b50610169610592565b6040516101769190610e69565b60405180910390f35b34801561018b57600080fd5b506101946105bc565b6040516101a19190610b70565b60405180910390f35b3480156101b657600080fd5b506101d160048036038101906101cc9190610f39565b6105cb565b6040516101df92919061101c565b60405180910390f35b3480156101f457600080fd5b506101fd610699565b60405161020a91906110c3565b60405180910390f35b34801561021f57600080fd5b506102286106b0565b6040516102359190610b70565b60405180910390f35b6102466106bd565b005b34801561025457600080fd5b5061026f600480360381019061026a91906110de565b61082c565b60405161027c919061112c565b60405180910390f35b34801561029157600080fd5b5061029a610873565b6040516102a79190610b70565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610381929190611147565b60405180910390fd5b610394828261087f565b5050565b6000600254905090565b60006103bc604051806020016040528060008152506105cb565b5090508061042b5747600080549050600160149054906101000a900460ff1660018111156103ed576103ec61104c565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161042293929190611170565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104505761044f61104c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161051a95949392919061121f565b6020604051808303816000875af1158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611287565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000606060008060018111156105e4576105e361104c565b5b600160149054906101000a900460ff1660018111156106065761060561104c565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025461063991906112e3565b421015905060008060008054905011905060007f0000000000000000000000000000000000000000000000000000000000000000471015905083801561067c5750825b80156106855750815b801561068e5750805b955050505050915091565b6000600160149054906101000a900460ff16905090565b6000600361ffff16905090565b600060018111156106d1576106d061104c565b5b600160149054906101000a900460ff1660018111156106f3576106f261104c565b5b1461072a576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610784576040517f6844f56200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061084157610840611317565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061089a57610899611317565b5b60200260200101516108ac9190611375565b905060008082815481106108c3576108c2611317565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109575761095661104c565b5b0217905550600067ffffffffffffffff81111561097757610976610be1565b5b6040519080825280602002602001820160405280156109a55781602001602082028036833780820191505090505b50600090805190602001906109bb929190610ab0565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109e9906113d7565b60006040518083038185875af1925050503d8060008114610a26576040519150601f19603f3d011682016040523d82523d6000602084013e610a2b565b606091505b5050905080610a66576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167ff0836b27d9c22cc60f7d12542ac359b035465aa8ff68af7d15d95a399b81bf8b60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b29579160200282015b82811115610b285782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad0565b5b509050610b369190610b3a565b5090565b5b80821115610b53576000816000905550600101610b3b565b5090565b6000819050919050565b610b6a81610b57565b82525050565b6000602082019050610b856000830184610b61565b92915050565b6000604051905090565b600080fd5b600080fd5b610ba881610b57565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c1982610bd0565b810181811067ffffffffffffffff82111715610c3857610c37610be1565b5b80604052505050565b6000610c4b610b8b565b9050610c578282610c10565b919050565b600067ffffffffffffffff821115610c7757610c76610be1565b5b602082029050602081019050919050565b600080fd5b6000610ca0610c9b84610c5c565b610c41565b90508083825260208201905060208402830185811115610cc357610cc2610c88565b5b835b81811015610cec5780610cd88882610bb6565b845260208401935050602081019050610cc5565b5050509392505050565b600082601f830112610d0b57610d0a610bcb565b5b8135610d1b848260208601610c8d565b91505092915050565b60008060408385031215610d3b57610d3a610b95565b5b6000610d4985828601610bb6565b925050602083013567ffffffffffffffff811115610d6a57610d69610b9a565b5b610d7685828601610cf6565b9150509250929050565b600080fd5b60008083601f840112610d9b57610d9a610bcb565b5b8235905067ffffffffffffffff811115610db857610db7610d80565b5b602083019150836001820283011115610dd457610dd3610c88565b5b9250929050565b60008060208385031215610df257610df1610b95565b5b600083013567ffffffffffffffff811115610e1057610e0f610b9a565b5b610e1c85828601610d85565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5382610e28565b9050919050565b610e6381610e48565b82525050565b6000602082019050610e7e6000830184610e5a565b92915050565b600080fd5b600067ffffffffffffffff821115610ea457610ea3610be1565b5b610ead82610bd0565b9050602081019050919050565b82818337600083830152505050565b6000610edc610ed784610e89565b610c41565b905082815260208101848484011115610ef857610ef7610e84565b5b610f03848285610eba565b509392505050565b600082601f830112610f2057610f1f610bcb565b5b8135610f30848260208601610ec9565b91505092915050565b600060208284031215610f4f57610f4e610b95565b5b600082013567ffffffffffffffff811115610f6d57610f6c610b9a565b5b610f7984828501610f0b565b91505092915050565b60008115159050919050565b610f9781610f82565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fd7578082015181840152602081019050610fbc565b60008484015250505050565b6000610fee82610f9d565b610ff88185610fa8565b9350611008818560208601610fb9565b61101181610bd0565b840191505092915050565b60006040820190506110316000830185610f8e565b81810360208301526110438184610fe3565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061108c5761108b61104c565b5b50565b600081905061109d8261107b565b919050565b60006110ad8261108f565b9050919050565b6110bd816110a2565b82525050565b60006020820190506110d860008301846110b4565b92915050565b6000602082840312156110f4576110f3610b95565b5b600061110284828501610bb6565b91505092915050565b600061111682610e28565b9050919050565b6111268161110b565b82525050565b6000602082019050611141600083018461111d565b92915050565b600060408201905061115c6000830185610e5a565b6111696020830184610e5a565b9392505050565b60006060820190506111856000830186610b61565b6111926020830185610b61565b61119f6040830184610b61565b949350505050565b6000819050919050565b6111ba816111a7565b82525050565b600067ffffffffffffffff82169050919050565b6111dd816111c0565b82525050565b600061ffff82169050919050565b6111fa816111e3565b82525050565b600063ffffffff82169050919050565b61121981611200565b82525050565b600060a08201905061123460008301886111b1565b61124160208301876111d4565b61124e60408301866111f1565b61125b6060830185611210565b6112686080830184611210565b9695505050505050565b60008151905061128181610b9f565b92915050565b60006020828403121561129d5761129c610b95565b5b60006112ab84828501611272565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ee82610b57565b91506112f983610b57565b9250828201905080821115611311576113106112b4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061138082610b57565b915061138b83610b57565b92508261139b5761139a611346565b5b828206905092915050565b600081905092915050565b50565b60006113c16000836113a6565b91506113cc826113b1565b600082019050919050565b60006113e2826113b4565b915081905091905056fea264697066735822122088f9f20aa39e0ce7efac26ce4747ae59cb575e054a0652e0157dc3cc5a5cf48064736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80636e04ff0d116100645780636e04ff0d146101aa578063977bb0b6146101e8578063b0fb162f14610213578063c1af57851461023e578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac5780631fe543e3146100d7578063320229eb146101005780634585e33b1461012b578063473f1ddc1461015457806353a2c19a1461017f575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b70565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610d24565b6102d8565b005b34801561010c57600080fd5b50610115610398565b6040516101229190610b70565b60405180910390f35b34801561013757600080fd5b50610152600480360381019061014d9190610ddb565b6103a2565b005b34801561016057600080fd5b50610169610592565b6040516101769190610e69565b60405180910390f35b34801561018b57600080fd5b506101946105bc565b6040516101a19190610b70565b60405180910390f35b3480156101b657600080fd5b506101d160048036038101906101cc9190610f39565b6105cb565b6040516101df92919061101c565b60405180910390f35b3480156101f457600080fd5b506101fd610699565b60405161020a91906110c3565b60405180910390f35b34801561021f57600080fd5b506102286106b0565b6040516102359190610b70565b60405180910390f35b6102466106bd565b005b34801561025457600080fd5b5061026f600480360381019061026a91906110de565b61082c565b60405161027c919061112c565b60405180910390f35b34801561029157600080fd5b5061029a610873565b6040516102a79190610b70565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610381929190611147565b60405180910390fd5b610394828261087f565b5050565b6000600254905090565b60006103bc604051806020016040528060008152506105cb565b5090508061042b5747600080549050600160149054906101000a900460ff1660018111156103ed576103ec61104c565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161042293929190611170565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104505761044f61104c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161051a95949392919061121f565b6020604051808303816000875af1158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611287565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000606060008060018111156105e4576105e361104c565b5b600160149054906101000a900460ff1660018111156106065761060561104c565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025461063991906112e3565b421015905060008060008054905011905060007f0000000000000000000000000000000000000000000000000000000000000000471015905083801561067c5750825b80156106855750815b801561068e5750805b955050505050915091565b6000600160149054906101000a900460ff16905090565b6000600361ffff16905090565b600060018111156106d1576106d061104c565b5b600160149054906101000a900460ff1660018111156106f3576106f261104c565b5b1461072a576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015610784576040517f6844f56200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061084157610840611317565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061089a57610899611317565b5b60200260200101516108ac9190611375565b905060008082815481106108c3576108c2611317565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109575761095661104c565b5b0217905550600067ffffffffffffffff81111561097757610976610be1565b5b6040519080825280602002602001820160405280156109a55781602001602082028036833780820191505090505b50600090805190602001906109bb929190610ab0565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109e9906113d7565b60006040518083038185875af1925050503d8060008114610a26576040519150601f19603f3d011682016040523d82523d6000602084013e610a2b565b606091505b5050905080610a66576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167ff0836b27d9c22cc60f7d12542ac359b035465aa8ff68af7d15d95a399b81bf8b60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b29579160200282015b82811115610b285782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad0565b5b509050610b369190610b3a565b5090565b5b80821115610b53576000816000905550600101610b3b565b5090565b6000819050919050565b610b6a81610b57565b82525050565b6000602082019050610b856000830184610b61565b92915050565b6000604051905090565b600080fd5b600080fd5b610ba881610b57565b8114610bb357600080fd5b50565b600081359050610bc581610b9f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c1982610bd0565b810181811067ffffffffffffffff82111715610c3857610c37610be1565b5b80604052505050565b6000610c4b610b8b565b9050610c578282610c10565b919050565b600067ffffffffffffffff821115610c7757610c76610be1565b5b602082029050602081019050919050565b600080fd5b6000610ca0610c9b84610c5c565b610c41565b90508083825260208201905060208402830185811115610cc357610cc2610c88565b5b835b81811015610cec5780610cd88882610bb6565b845260208401935050602081019050610cc5565b5050509392505050565b600082601f830112610d0b57610d0a610bcb565b5b8135610d1b848260208601610c8d565b91505092915050565b60008060408385031215610d3b57610d3a610b95565b5b6000610d4985828601610bb6565b925050602083013567ffffffffffffffff811115610d6a57610d69610b9a565b5b610d7685828601610cf6565b9150509250929050565b600080fd5b60008083601f840112610d9b57610d9a610bcb565b5b8235905067ffffffffffffffff811115610db857610db7610d80565b5b602083019150836001820283011115610dd457610dd3610c88565b5b9250929050565b60008060208385031215610df257610df1610b95565b5b600083013567ffffffffffffffff811115610e1057610e0f610b9a565b5b610e1c85828601610d85565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5382610e28565b9050919050565b610e6381610e48565b82525050565b6000602082019050610e7e6000830184610e5a565b92915050565b600080fd5b600067ffffffffffffffff821115610ea457610ea3610be1565b5b610ead82610bd0565b9050602081019050919050565b82818337600083830152505050565b6000610edc610ed784610e89565b610c41565b905082815260208101848484011115610ef857610ef7610e84565b5b610f03848285610eba565b509392505050565b600082601f830112610f2057610f1f610bcb565b5b8135610f30848260208601610ec9565b91505092915050565b600060208284031215610f4f57610f4e610b95565b5b600082013567ffffffffffffffff811115610f6d57610f6c610b9a565b5b610f7984828501610f0b565b91505092915050565b60008115159050919050565b610f9781610f82565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fd7578082015181840152602081019050610fbc565b60008484015250505050565b6000610fee82610f9d565b610ff88185610fa8565b9350611008818560208601610fb9565b61101181610bd0565b840191505092915050565b60006040820190506110316000830185610f8e565b81810360208301526110438184610fe3565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061108c5761108b61104c565b5b50565b600081905061109d8261107b565b919050565b60006110ad8261108f565b9050919050565b6110bd816110a2565b82525050565b60006020820190506110d860008301846110b4565b92915050565b6000602082840312156110f4576110f3610b95565b5b600061110284828501610bb6565b91505092915050565b600061111682610e28565b9050919050565b6111268161110b565b82525050565b6000602082019050611141600083018461111d565b92915050565b600060408201905061115c6000830185610e5a565b6111696020830184610e5a565b9392505050565b60006060820190506111856000830186610b61565b6111926020830185610b61565b61119f6040830184610b61565b949350505050565b6000819050919050565b6111ba816111a7565b82525050565b600067ffffffffffffffff82169050919050565b6111dd816111c0565b82525050565b600061ffff82169050919050565b6111fa816111e3565b82525050565b600063ffffffff82169050919050565b61121981611200565b82525050565b600060a08201905061123460008301886111b1565b61124160208301876111d4565b61124e60408301866111f1565b61125b6060830185611210565b6112686080830184611210565b9695505050505050565b60008151905061128181610b9f565b92915050565b60006020828403121561129d5761129c610b95565b5b60006112ab84828501611272565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ee82610b57565b91506112f983610b57565b9250828201905080821115611311576113106112b4565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061138082610b57565b915061138b83610b57565b92508261139b5761139a611346565b5b828206905092915050565b600081905092915050565b50565b60006113c16000836113a6565b91506113cc826113b1565b600082019050919050565b60006113e2826113b4565b915081905091905056fea264697066735822122088f9f20aa39e0ce7efac26ce4747ae59cb575e054a0652e0157dc3cc5a5cf48064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 240,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 242,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 245,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)237"
      },
      {
        "astId": 266,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)237": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}